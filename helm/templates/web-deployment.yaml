apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: {{.Values.application.name}}
  name: "web-{{.Values.application.name}}"
spec:
  replicas: {{.Values.replicaCount}}
  selector:
    matchLabels:
      app: {{.Values.application.name}}
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: {{.Values.application.name}}
    spec:
      containers:
      - image: "{{.Values.image.repository}}:{{.Values.image.tag}}"
        name: web
        imagePullPolicy: {{.Values.image.pullPolicy}}
        envFrom:
          - configMapRef:
              name: "config-{{.Values.application.name}}"
        ports:
          - containerPort: {{.Values.service.internalPort}}
            name: http
            protocol: TCP
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /health-check
            port: http
          initialDelaySeconds: 20
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 30
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /health-check
            port: http
          initialDelaySeconds: 20
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 30
        resources:
            limits:
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 2Gi
        command: ["bundle", "exec", "rails", "server"]
        args: ["-p", "{{.Values.service.internalPort}}"]
status: {}
